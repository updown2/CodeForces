#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, at)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e endl
#define int ll
#define pb push_back
//500,000,000 operations
//Global Variables
int N, mid, need;
string inp;
set<char> have;
set<char>::iterator it1;
multiset<char> add;
multiset<char>::iterator it;

bool works() {
    //w<< "Trying" s mid<<e;
    have.clear();
    add.clear();

    For (i, 0, mid) {
        if (have.find(inp[i]) != have.end()) add.insert(inp[i]);
        else have.insert(inp[i]);
    }
    if (have.size() == need) return true;

    //for (it1 = have.begin(); it1 != have.end(); it1++) w<< (*it1)<<" "; w<<e;
    //for (it = add.begin(); it != add.end(); it++) w<< (*it)<<" "; w<<e;


    For (i, mid, N) {
        it = add.find(inp[i-mid]);
        if (it != add.end()) add.erase(it);
        else have.erase(inp[i-mid]);

        if (have.find(inp[i]) != have.end()) add.insert(inp[i]);
        else have.insert(inp[i]);
        //w<< "ind:" s i<<e;
        //for (it1 = have.begin(); it1 != have.end(); it1++) w<< (*it1)<<" "; w<<e;
        //for (it = add.begin(); it != add.end(); it++) w<< (*it)<<" "; w<<e;

        if (have.size() == need) return true;
    }

    return false;
}


main() {
    //ifstream cin ("test3.in");
    //ofstream cout ("test.out");
    cin >> N >> inp;
    ffi have.insert(inp[i]);
    int a = need = have.size(); int b = N;
    have.clear();
    while (a != b) {
        mid = (a+b)/2;
        if (works()) b = mid;
        else a = mid+1;
    }
    w<< a<<e;
	return 0;
}