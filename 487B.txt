#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define s <<" "<<
#define w cout<<
#define e <<endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
#define int ll
//Global Variables
int N,S,L1,inp[100000],mint[100000*4+1],maxt[100000*4+1],rch[100000],dp[100001];
bool gd[100001];

void build(int ind, int L, int R) {
    if (L == R) {mint[ind] = maxt[ind] = inp[L]; return;}
    build(ind*2, L, (L+R)/2); build(ind*2+1, (L+R)/2+1, R);
    mint[ind] = min(mint[ind*2], mint[ind*2+1]);
    maxt[ind] = max(maxt[ind*2], maxt[ind*2+1]);
}
int maxq(int ind, int L, int R, int oL, int oR) {
    if (oR < L || oL > R) return -1000000001;
    if (L >= oL && R <= oR) return maxt[ind];
    return max(maxq(ind*2, L, (L+R)/2, oL, oR), maxq(ind*2+1, (L+R)/2+1, R, oL, oR));
}
int minq(int ind, int L, int R, int oL, int oR) {
    if (oR < L || oL > R) return 1000000001;
    if (L >= oL && R <= oR) return mint[ind];
    return min(minq(ind*2, L, (L+R)/2, oL, oR), minq(ind*2+1, (L+R)/2+1, R, oL, oR));
}
int query(int oL, int oR) {
    return maxq(1, 0, N-1, oL, oR)-minq(1, 0, N-1, oL, oR);
}

main() {
    //ifstream cin ("test.in");
	//ofstream cout ("test.out");
	cin >> N >> S >> L1;
	ffi {cin >> inp[i]; gd[i] = true; dp[i] = -1;}
	dp[N] = 0; gd[N] = true;
	//For (i, 0, 4*N+1) mint[i] = 1000000001, maxt[i] = -1000000001;
	build(1, 0, N-1);
	int j = -1;
	For (i, 0, N) {
        while (j<N && query(i, j) <= S) j++;
        rch[i] = j-1;
        //w i s rch[i] e;
	}
	j = N-1;
	for (int i=N-1; i>=0; i--) {
        //w "i=" s i e;
        //w "gd[i]=" s gd[i] e;
        if (dp[i] == -1) {
            //w gd[i] s i-L1+1 e;
            if (!gd[i] || i-L1+1 < 0) {w -1 e; return 0;}
            For (j, i-L1+1, i) gd[j] = false;
        }
        if (j > i) {w -1 e; return 0;}
        if (gd[i]) {
            int save = j;
            while (j >= 0 && rch[j] >= i) j--;
//w j+1 s i e;
            if (i-j >=L1) {
                //w "updating..." e;
                For (k, j+1, save+1) dp[k] = dp[i+1]+1;
            }
        }
        //w "DP[i]=" s dp[i] e;
	}
	w dp[0] e;
}