#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
#define int ll
//Global Variables
int N, Q;
int dep[100000];
int parent[100000];
vector<int> adj[100000];
int ancestor[100000][20];
int out;


void dfs(int x, int par) {
	if (x != 0) dep[x] = dep[par]+1;
	for (int i:adj[x]) dfs(i, x);
}


int LCA(int A, int B) {
	if (dep[A] > dep[B]) swap(A, B);
	int d = dep[B] - dep[A];
	For (i, 0, 18) {
		if (d&(1<<i) ) B = ancestor[B][i];
	}
	if (A == B) return A;

	for (int i=17; i>= 0; i--) {
		if (ancestor[A][i] != ancestor[B][i]) {
			A = ancestor[A][i];
			B = ancestor[B][i];
		}
	}
	return parent[A];
}

int dist(int X, int Y) {return dep[X]+dep[Y]-2*dep[LCA(X, Y)]+1;}

void go(int X, int Y, int Z) {out = max(out, dist(X, Y)+dist(Y, Z)-dist(X, Z)+1);}


main() {
	//ifstream cin ("test.in");
	//ofstream cout ("test.out");
	cin >> N >> Q;
	For (i, 1, N) {
		int a;
		cin >> a; a--;
		parent[i] = a;
		adj[a].pb(i);
	}

	dep[0] = 1;
	parent[0] = 0;
	dfs(0, 0);

	ffi ancestor[i][0] = parent[i];


	For (k, 0, 17) ffi ancestor[i][k+1] = ancestor[ancestor[i][k]][k];

	For (i, 0, Q) {
	    int X, Y, Z;
        cin >> X >> Y >> Z; X--; Y--; Z--;
        out = 0;
        go(X, Y, Z), go(Y, X, Z), go(X, Z, Y);
        w<< out/2<< e;
	}
	return 0;
}
