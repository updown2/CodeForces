#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
//#define int ll
const int MAXN=200000;
///500,000,000
int N, par[MAXN], T[MAXN], Q, on[MAXN*4+1], loc[MAXN], ind[MAXN], lazy[MAXN*4+1];
vector<int> adj[MAXN], nums;

void go(int at) {
	loc[at] = nums.size();
	nums.pb(T[at]);
	For (i, 0, adj[at].size()) go(adj[at][i]);
	ind[at] = nums.size()-1;
}
void push(int index, int L, int R) {
	if (lazy[index] == 0) return;
	on[index] = abs( ((lazy[index]%2)*(R-L+1)) - on[index] );
	if (L != R) {
		lazy[index*2] += lazy[index];
		lazy[index*2+1] += lazy[index];
	}
	lazy[index] = 0;
}
void build (int index, int L, int R) {
	if (L == R) {
		on[index] = nums[L];
	}
	else {
		build(index*2, L, (L+R)/2);
		build(index*2+1, 1+(L+R)/2, R);
		on[index] = on[index*2] + on[index*2+1];
	}
}
int query (int index, int L, int R, int oL, int oR) {
	push(index, L, R);
	if ( (oR < L) || (oL > R) ) return 0;
	if ( (R <= oR) && (L >= oL) ) return on[index];
	
	return query(index*2, L, (L+R)/2, oL, oR) + query(index*2+1, 1+(L+R)/2, R, oL, oR );
}

void update_range (int index, int L, int R, int a, int b, int v) {
	push(index, L, R);
	if (b<L || a>R) return;
	else if (a<=L && R<= b) {
		lazy[index] = v;
		push(index, L, R);
	}
	else {
		update_range(index*2, L, (L+R)/2, a, b, v);
		update_range(index*2+1, 1+(L+R)/2, R, a, b, v);
		on[index] = on[index*2]+on[index*2+1];
	}
}

int main () {
	//ifstream cin("test.in");
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N;
	For (i, 1, N) {
		cin >> par[i];
		par[i]--;
		adj[par[i]].pb(i);
	}
	ffi cin >> T[i];
	go(0);
	build (1, 0, N-1);
	
	//ffi w<< nums[i]<<" "; w<<e; ffi w<< loc[i] s ind[i]<<e;
	
	cin >> Q;
	For (q, 0, Q) {
		string a; int b;
		cin >> a >> b; b--;
		if (a[0] == 'g') w<< query(1, 0, N-1, loc[b], ind[b]) <<e;
		else update_range(1, 0, N-1, loc[b], ind[b], 1);
	}
}