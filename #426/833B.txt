#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 1, K)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
#define int ll
const int MAXN=35000;
///500,000,000
int N, K, inp[MAXN], dp[MAXN][50], tree[4*MAXN+1], lazy[4*MAXN+1], pre[MAXN];
///Max-tree
set<int> far;
map<int, int> use;

void push(int ind, int L, int R) {
    if (lazy[ind] == 0) return;
    tree[ind] += lazy[ind];
    if (L != R) lazy[ind*2] += lazy[ind], lazy[ind*2+1] += lazy[ind];
    lazy[ind] = 0;
}

void update(int ind, int L, int R, int L1, int R1, int v) {
    push(ind, L, R);
    if (R1 < L || L1 > R) return;
    if (R1 >= R && L1 <=L) {
        lazy[ind] = v;
        push(ind, L, R);
        return;
    }
    update(ind*2,L,(L+R)/2, L1, R1, v); update(ind*2+1, (L+R)/2+1, R,L1,R1, v);
    tree[ind] = max(tree[ind*2], tree[ind*2+1]);
}
int query(int ind, int L, int R, int L1, int R1) {
    push(ind, L, R);
    if (R1 < L || L1 > R) return 0;
    if (R1 >= R && L1 <=L) return tree[ind];
    return max(query(ind*2,L,(L+R)/2, L1, R1),query(ind*2+1,(L+R)/2+1, R,L1,R1));
}
int nums[MAXN];
void build(int ind, int L, int R) {
    if (L == R) {
        tree[ind] = nums[L];
        return;
    }
    build(ind*2, L, (L+R)/2);
    build(ind*2+1, (L+R)/2+1, R);
    tree[ind] = max(tree[ind*2], tree[ind*2+1]);
}


main() {
	//ifstream cin("test.in"); //freopen("test.in","r",stdin);
	cin >> N >> K;
	ffi {
	    cin >> inp[i], far.insert(inp[i]), dp[i][0] = far.size();
	    use.find(inp[i]) != use.end() ? pre[i] = use[inp[i]] : pre[i] = -1;
	    use[inp[i]] = i;
	}
    ffj {
        nums[0] = 0;
        For (i, 1, N) nums[i] = dp[i-1][j-1];
        //ffi w<< nums[i]<< " "; w<<e;

        For (i, 0, 4*N+1) tree[i] = lazy[i] = 0;

        build(1, 0, N-1);
        ffi {
            update(1, 0, N-1, pre[i]+1, i, 1);
            dp[i][j] = query(1, 0, N-1, 0, i);

            //if (j == 2) {For (k, 0, N) w<< query(1, 0, N-1, k, k) << " "; w<<e;}
            //w<< dp[i][j]<< " ";
        }
        //w<<e;
    }
    int out = 0;
    ffi out = max(out, dp[i][K-1]);
    w<< out<<e;
}