#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(ll i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define w cout
#define e endl
//500,000,000 operations

//Global Variables
ll N, M;
char grid[2000][2000];
ll stars1[1000000][2];
ll stars2[1000000][2];
ll at = 0;


int compare_first(const void * a, const void * b)
{
	const ll * ia = (const ll *)a;
	const ll * ib = (const ll *)b;
	
	return ia[0] - ib[0];
}
int compare_second(const void * a, const void * b)
{
	const ll * ia = (const ll *)a;
	const ll * ib = (const ll *)b;
	
	return ia[1] - ib[1];
}
int main() {
	//ifstream cin ("test.in");
	//ofstream cout ("test.out");
	
	cin >> N >> M;
	
	ll row = -1;
	ll col = -1;
	ffi {
		ffj {
			cin >> grid[i][j];
			if (grid[i][j] == '*') {
				stars1[at][0] = i;
				stars1[at][1] = j;
				stars2[at][0] = i;
				stars2[at][1] = j;
				at++;
			}
		}
	}
	qsort(stars1, at, 2*sizeof(ll), compare_first);
	qsort(stars2, at, 2*sizeof(ll), compare_second);
	
	/*For (i, 0, at) {
		cout << stars1[i][0] << " " << stars1[i][1] << endl;
	}w << e;
	For (i, 0, at) {
		cout << stars2[i][0] << " " << stars2[i][1] << endl;
	}*/
	bool foundr = false;
	bool foundc = false;
	For (i, 1, at) {
		if (stars1[i][0] == stars1[i-1][0]) {
			if (!foundr) {
				foundr = true;
				row = stars1[i][0];
			}
			else if (stars1[i][0] != row) {
				w << "NO" << endl;
				//w << "More than two rows with two stars" << e;
				return 0;
			}
		}
		
		if (stars2[i][1] == stars2[i-1][1]) {
			if (!foundc) {
				foundc = true;
				col = stars2[i][1];
			}
			else if (stars2[i][1] != col) {
				w << "NO" << endl;
				//w << "More than two columns with two stars" << e;
				return 0;
			}
		}		  
	}
	
	if (row == -1) {
		For (i, 0, at) {
			if (stars1[i][1] != col) {row = stars1[i][0]; break;}
		}
		
		if (row == -1) row = 0;
	}
	if (col == -1) {
		For (i, 0, at) {
			if (stars1[i][0] != row) {col = stars1[i][1]; break;}
		}
		if (col == -1) col = 0;
	}
	//cout << row << " " << col << e;
	ffi {
		ffj {
			if (grid[i][j] == '*') {
				if (row == i || col == j) {
					
				}
				else {
					w << "NO" << e;
					return 0;
				}
			}
		}
	}
	
	cout << "YES" << e;
	cout << row+1 << " " << col+1 << e;
	
	return 0;
}

