#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
//#define int ll
const int MAXN=3000;//, INF=1000000000000000000;
///500,000,000
int N, M, Q, out, query[400000][5];
bool reach[MAXN][MAXN], visited[MAXN];
vector<int> adj[MAXN];
int anc[MAXN+1][12];

int compare_second(const void * a, const void * b) {
	const int * ia = (const int *)a;
	const int * ib = (const int *)b;

	return ia[1] - ib[1];
}
int compare_forth(const void * a, const void * b) {
	const int * ia = (const int *)a;
	const int * ib = (const int *)b;

	return ia[3] - ib[3];
}
void dfs(int start, int at) {
    if (reach[start][at]) return;
    reach[start][at] = true;
    for (int i: adj[at]) dfs(start, i);
}
void build(int at) {
    anc[N][0] = N;
    ffi {
        if (i == at) anc[i][0] = N;
        else {
            for (int j: adj[i]) {
                if (reach[j][at]) {
                    anc[i][0] = j;
                    break;
                }
            }
            if (adj[i].size() == 0) anc[i][0] = N;
        }
    }
    For (k, 1, 12) For (i, 0, N+1) anc[i][k] = anc[anc[i][k-1]][k-1];
    //w<< "Built" s at+1<<e;For (k, 0, 12) {ffi w<< anc[i][k]+1 << " ";w<<e;}
}
int jump(int at, int up) {
    For (k, 0, 12) if (up & (1<<k)) {
        at = anc[at][k];
    }
    return at;
}

main() {
    //ifstream cin("test.in");
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> N >> M >> Q;
    ffj {
        int a, b; cin >> a >> b; a--; b--;
        adj[a].pb(b);
    }
    ffi {
        sort(adj[i].begin(), adj[i].end());
        dfs(i, i);
    }
    //ffi {For (j, 0, N) w<< reach[i][j]<< " "; w<<e;}
    For (q, 0, Q) {
        cin >> query[q][0] >> query[q][1] >> query[q][2];
        query[q][0]--;
        query[q][1]--;
        query[q][3] = q;
    }
    qsort(query, Q, 5*sizeof(int), compare_second);

    For (q, 0, Q) {
        if (q == 0 || query[q][1] != query[q-1][1]) build(query[q][1]);
        out = -1;
        if (reach[query[q][0]][query[q][1]] && jump(query[q][0], 3001) == N) {
            out = jump(query[q][0], query[q][2]-1);
            if (out == N) out = -2;
            out ++;
        }
        query[q][4] = out;
    }
    qsort(query, Q, 5*sizeof(int), compare_forth);
    For (q, 0, Q) w<< query[q][4]<<e;
}
